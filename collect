use rand::Rng;

fn gen_random_vector(n: usize) -> Vec<i32> {
    let mut rng = rand::thread_rng();
    (0..n).map(|_| rng.gen_range(10..100)).collect()
}

fn min_adjacent_sum(data: &[i32]) -> (i32, usize, usize) {
    let mut min_sum = i32::MAX;
    let mut min_index = 0;

    for i in 0..data.len() - 1 {
        let sum = data[i] + data[i + 1];
        if sum < min_sum {
            min_sum = sum;
            min_index = i;
        }
    }

    (min_sum, min_index, min_index + 1)
}

fn print_vector_with_min(data: &[i32]) {
    let (min_sum, i1, i2) = min_adjacent_sum(data);

    // Виводимо індекси
    print!("indexes: ");
    for i in 0..data.len() {
        print!("{:>2}. ", i);
    }
    println!();

    // Виводимо дані
    print!("data:    [");
    for (i, val) in data.iter().enumerate() {
        if i != 0 {
            print!(", ");
        }
        print!("{}", val);
    }
    println!("]");

    // Виводимо мінімальну пару
    print!("indexes: ");
    for i in 0..data.len() {
        if i == i1 {
            print!("\\__ ");
        } else if i == i2 {
            print!("__/");
        } else {
            print!("    ");
        }
    }
    println!();

    // Виводимо результат
    println!(
        "min adjacent sum={}+{}={} at indexes:{},{}",
        data[i1], data[i2], min_sum, i1, i2
    );
}

fn main() {
    let data = gen_random_vector(20);
    print_vector_with_min(&data);
}
indexes:  0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 
data:    [45, 87, 49, 64, 50, 37, 45, 72, 55, 64, 90, 86, 60, 54, 78, 72, 83, 44, 89, 22]
indexes:                         \__ __/                                                
min adjacent sum=37+45=82 at indexes:5,6
